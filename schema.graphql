schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "step"
  delete_step(
    # filter the rows which have to be deleted
    where: step_bool_exp!
  ): step_mutation_response

  # delete single row from the table: "step"
  delete_step_by_pk(id: Int!): step

  # insert data into the table: "step"
  insert_step(
    # the rows to be inserted
    objects: [step_insert_input!]!

    # on conflict condition
    on_conflict: step_on_conflict
  ): step_mutation_response

  # insert a single row into the table: "step"
  insert_step_one(
    # the row to be inserted
    object: step_insert_input!

    # on conflict condition
    on_conflict: step_on_conflict
  ): step

  # update data of the table: "step"
  update_step(
    # increments the numeric columns with given value of the filtered values
    _inc: step_inc_input

    # sets the columns of the filtered rows to the given values
    _set: step_set_input

    # filter the rows which have to be updated
    where: step_bool_exp!
  ): step_mutation_response

  # update single row of the table: "step"
  update_step_by_pk(
    # increments the numeric columns with given value of the filtered values
    _inc: step_inc_input

    # sets the columns of the filtered rows to the given values
    _set: step_set_input
    pk_columns: step_pk_columns_input!
  ): step
}

# An object with globally unique ID
interface Node {
  # A globally unique identifier
  id: ID!
}

# column ordering options
enum order_by {
  # in ascending order, nulls last
  asc

  # in ascending order, nulls first
  asc_nulls_first

  # in ascending order, nulls last
  asc_nulls_last

  # in descending order, nulls first
  desc

  # in descending order, nulls first
  desc_nulls_first

  # in descending order, nulls last
  desc_nulls_last
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type query_root {
  node(
    # A globally unique id
    id: ID!
  ): Node

  # fetch data from the table: "step"
  step_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [step_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [step_order_by!]

    # filter the rows returned
    where: step_bool_exp
  ): stepConnection!
}

# columns and relationships of "step"
type step implements Node {
  id: ID!
  name: String!
}

# Boolean expression to filter rows from the table "step". All fields are combined with a logical 'AND'.
input step_bool_exp {
  _and: [step_bool_exp!]
  _not: step_bool_exp
  _or: [step_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}

# unique or primary key constraints on table "step"
enum step_constraint {
  # unique or primary key constraint
  step_pkey
}

# input type for incrementing numeric columns in table "step"
input step_inc_input {
  id: Int
}

# input type for inserting data into table "step"
input step_insert_input {
  id: Int
  name: String
}

# response of any mutation on the table "step"
type step_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [step!]!
}

# on conflict condition type for table "step"
input step_on_conflict {
  constraint: step_constraint!
  update_columns: [step_update_column!]!
  where: step_bool_exp
}

# Ordering options when selecting data from "step".
input step_order_by {
  id: order_by
  name: order_by
}

# primary key columns input for table: step
input step_pk_columns_input {
  id: Int!
}

# select columns of table "step"
enum step_select_column {
  # column name
  id

  # column name
  name
}

# input type for updating data in table "step"
input step_set_input {
  id: Int
  name: String
}

# update columns of table "step"
enum step_update_column {
  # column name
  id

  # column name
  name
}

# A Relay connection object on "step"
type stepConnection {
  edges: [stepEdge!]!
  pageInfo: PageInfo!
}

type stepEdge {
  cursor: String!
  node: step!
}

# Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  # does the column match the given case-insensitive pattern
  _ilike: String
  _in: [String!]

  # does the column match the given POSIX regular expression, case insensitive
  _iregex: String
  _is_null: Boolean

  # does the column match the given pattern
  _like: String
  _lt: String
  _lte: String
  _neq: String

  # does the column NOT match the given case-insensitive pattern
  _nilike: String
  _nin: [String!]

  # does the column NOT match the given POSIX regular expression, case insensitive
  _niregex: String

  # does the column NOT match the given pattern
  _nlike: String

  # does the column NOT match the given POSIX regular expression, case sensitive
  _nregex: String

  # does the column NOT match the given SQL regular expression
  _nsimilar: String

  # does the column match the given POSIX regular expression, case sensitive
  _regex: String

  # does the column match the given SQL regular expression
  _similar: String
}

type subscription_root {
  node(
    # A globally unique id
    id: ID!
  ): Node

  # fetch data from the table: "step"
  step_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [step_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [step_order_by!]

    # filter the rows returned
    where: step_bool_exp
  ): stepConnection!
}

